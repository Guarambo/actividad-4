pipeline {
    agent any
    
    tools {
        maven "maven_tool"
        jdk "jdk8"
    }
    
    stages {
        stage("Checkout") {
            steps {
                checkout([$class: 'GitSCM', branches: [[name: '*/master']], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[url: 'https://gitlab.com/codilabs/Ear-Test.git']]])
            }
        }
        
        stage("Scan & Build") {
            environment {
                scannerHome = tool "sonar_scanner"
            }
            steps {
                parallel "Scan": {
                    withSonarQubeEnv("sonarqube_server") {
                        bat """
                        "${scannerHome}/bin/sonar-scanner" \
                        -Dsonar.projectKey=earTest \
                        -Dsonar.projectName=Act-4-EarTest \
                        -Dsonar.projectVersion=0.1 \
                        -Dsonar.sources=testWAR/src \
                        """
                        //-Dsonar.java.binaries=./target/
                    }
                    timeout(time: 10, unit: "MINUTES") {
                        waitForQualityGate abortPipeline: true
                    }
                }, "Build": {
                    bat "mvn clean install"
                },
                failFast: true
            }

        }
        
        stage("Deploy") {
            steps {
                bat "scp 'C:/Users/VM 1/Documents/repo/text.txt 192.168.2.12:C:/Users/VM 1/Documents/repo/'"
/*                 bat "scp -r testEAR '192.168.2.12:C:/Users/VM 2/Documents/'"

                bat """
                "ssh 192.168.2.12 C:/Progam Files/IBM/WebSphere/AppServer/bin/wsadmin.sh" \
                -f C:/Users/VM 2/Documents/deploy.jython \
                -lang jython \
                -conntype SOAP \
                -host localhost \
                -user administrador \
                -password administrador
                """ */
            }
        }
    }
}